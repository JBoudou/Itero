ALTER TABLE Polls
  MODIFY COLUMN
  MinNbRounds       tinyint unsigned  NOT NULL  DEFAULT 2,
  MODIFY COLUMN
  MaxNbRounds       tinyint unsigned            DEFAULT 10;

ALTER TABLE Ballots
  DROP FOREIGN KEY Ballots_Participant_fk;

DROP TRIGGER Participants_check_before_insert;
DROP TRIGGER Participants_check_before_update;
DROP PROCEDURE Participants_checker_before;

DELETE FROM Participants WHERE LastRound IS NULL;

ALTER TABLE Participants
  DROP COLUMN Since,
  CHANGE COLUMN LastRound
  Round     tinyint unsigned  NOT NULL,
  DROP PRIMARY KEY,
  ADD PRIMARY KEY (User, Poll, Round);

INSERT INTO Participants(User, Poll, Round)
  SELECT User, Poll, Round
    FROM Ballots
   WHERE (User, Poll, Round) NOT IN (SELECT User, Poll, Round FROM Participants)
   GROUP BY User, Poll, Round;
  
ALTER TABLE Ballots
  ADD CONSTRAINT Ballots_Participant_fk
  FOREIGN KEY (User, Poll, Round) REFERENCES Participants(User, Poll, Round) ON DELETE CASCADE;

DROP PROCEDURE Ballots_checker_before;
DROP TRIGGER Ballots_check_before_insert;
DROP TRIGGER Ballots_check_before_update;


# MariaDB 5.5 does not allow subquery in view's queries (sic!).
# Therefore we need an intermediate view...
CREATE SQL SECURITY INVOKER VIEW Participants_workaround AS
  SELECT Poll
    FROM Participants
   GROUP By Poll, User;


CREATE SQL SECURITY INVOKER VIEW Participants_Poll_Count AS
  SELECT Poll, COUNT(*) AS Count
    FROM Participants_workaround
   GROUP BY Poll;

CREATE SQL SECURITY INVOKER VIEW Participants_Round_Count AS
  SELECT Poll, Round, COUNT(*) AS Count
    FROM Participants
   GROUP BY Poll, Round;


DELIMITER //

CREATE FUNCTION RoundDeadline(
  CurrentRoundStart datetime,
  MaxRoundDuration time,
  Deadline datetime,
  CurrentRound tinyint,
  MinNbRounds tinyint
)
  RETURNS datetime DETERMINISTIC
BEGIN
  DECLARE one datetime;
  SET one = ADDTIME(CurrentRoundStart, MaxRoundDuration);

  IF CurrentRound + 1 < MinNbRounds OR Deadline < one THEN
    RETURN one;
  END IF;

  IF ADDTIME(one, MaxRoundDuration) > Deadline THEN
    RETURN Deadline;
  END IF;

  RETURN one;
END;
//

CREATE PROCEDURE Participants_checker_before (
  Poll  int unsigned,
  Round tinyint unsigned
)
BEGIN
  SELECT p.CurrentRound
    INTO @CurrentRound
    FROM Polls AS p
   WHERE p.id = Poll;

  IF Round > @CurrentRound THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Round must be at most CurrentRound';
  END IF;
END;
//

CREATE TRIGGER Participants_check_before_insert
  BEFORE INSERT ON Participants FOR EACH ROW
BEGIN
  CALL Participants_checker_before(NEW.Poll, NEW.Round);
END;
//

CREATE TRIGGER Participants_check_before_update
  BEFORE UPDATE ON Participants FOR EACH ROW
BEGIN
  CALL Participants_checker_before(NEW.Poll, NEW.Round);
END;
//

CREATE TRIGGER Ballots_check_before_insert
  BEFORE INSERT ON Ballots FOR EACH ROW
BEGIN
  SET NEW.Modified = CURRENT_TIMESTAMP();
END;
//

CREATE TRIGGER Ballots_check_before_update
  BEFORE UPDATE ON Ballots FOR EACH ROW
BEGIN
  SET NEW.Modified = CURRENT_TIMESTAMP();
END;
//

DELIMITER ;
